name: CI

on:
  push:
    branches: [ "main", "feat/*", "fix/*", "docs/*" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv7em-none-eabihf
          components: rustfmt, clippy

      - name: Install embedded tools
        run: cargo install flip-link

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo check (host-tool)
        run: cd host-tool && cargo check

      - name: Run cargo check (firmware)
        run: cd firmware && cargo check --target thumbv7em-none-eabihf

      - name: Run cargo check (protocol)
        run: cd protocol && cargo check

      - name: Run cargo check (tests - host-tool)
        run: cd host-tool && cargo check --tests

      - name: Run cargo check (tests - protocol)
        run: cd protocol && cargo check --tests

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo test (host-tool)
        run: cd host-tool && cargo test

      - name: Run cargo test (protocol)
        run: cd protocol && cargo test

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv7em-none-eabihf
          components: rustfmt, clippy

      - name: Install embedded tools
        run: cargo install flip-link

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo fmt (host-tool)
        run: cd host-tool && cargo fmt --all -- --check

      - name: Run cargo fmt (firmware)
        run: cd firmware && cargo fmt --all -- --check

      - name: Run cargo fmt (protocol)
        run: cd protocol && cargo fmt --all -- --check

      - name: Run cargo clippy (host-tool)
        run: cd host-tool && cargo clippy -- -D warnings

      - name: Run cargo clippy (firmware)
        run: cd firmware && cargo clippy --target thumbv7em-none-eabihf -- -D warnings

      - name: Run cargo clippy (protocol)
        run: cd protocol && cargo clippy -- -D warnings

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: [debug, release]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv7em-none-eabihf

      - name: Install embedded tools
        run: cargo install flip-link

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ matrix.profile }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build host-tool debug
        if: matrix.profile == 'debug'
        run: cd host-tool && cargo build

      - name: Build host-tool release
        if: matrix.profile == 'release'
        run: cd host-tool && cargo build --release

      - name: Build firmware debug
        if: matrix.profile == 'debug'
        run: cd firmware && cargo build --target thumbv7em-none-eabihf

      - name: Build firmware release
        if: matrix.profile == 'release'
        run: cd firmware && cargo build --target thumbv7em-none-eabihf --release

      - name: Build protocol debug
        if: matrix.profile == 'debug'
        run: cd protocol && cargo build

      - name: Build protocol release
        if: matrix.profile == 'release'
        run: cd protocol && cargo build --release

      - name: Check binary size (release only)
        if: matrix.profile == 'release'
        run: |
          cargo install cargo-binutils
          rustup component add llvm-tools-preview
          cd host-tool && cargo size --release --bin flash-programmer-tool
          cd ../firmware && cargo size --target thumbv7em-none-eabihf --release --bin firmware

  commit-check:
    name: Commit Convention Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install commitlint
        run: npm install -g @commitlint/cli

      - name: Check commit messages
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.sha }} --verbose

  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install markdownlint
        run: npm install -g markdownlint-cli2

      - name: Check markdown files
        run: markdownlint-cli2 "**/*.md" "#target" "#node_modules"
